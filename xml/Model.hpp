// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MODEL_HPP
#define MODEL_HPP

// Begin prologue.
//
/*******************************************************************
This file is part of Damaris.

Damaris is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Damaris is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Damaris.  If not, see <http://www.gnu.org/licenses/>.
********************************************************************/
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace Damaris
{
  namespace Model
  {
    class clients_mdl;
    class cores_mdl;
    class buffer_mdl;
    class queue_mdl;
    class architecture_mdl;
    class layout_mdl;
    class variable_mdl;
    class group_mdl;
    class parameter_mdl;
    class data_mdl;
    class event_mdl;
    class actions_mdl;
    class simulation_mdl;
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Damaris
{
  namespace Model
  {
    class clients_mdl: public ::xml_schema::type
    {
      public:
      // count
      // 
      typedef ::xml_schema::unsigned_int count_type;
      typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

      const count_type&
      count () const;

      count_type&
      count ();

      void
      count (const count_type& x);

      // Constructors.
      //
      clients_mdl (const count_type&);

      clients_mdl (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      clients_mdl (const clients_mdl& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual clients_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~clients_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< count_type > count_;
    };

    class cores_mdl: public ::xml_schema::type
    {
      public:
      // clients
      // 
      typedef ::Damaris::Model::clients_mdl clients_type;
      typedef ::xsd::cxx::tree::traits< clients_type, char > clients_traits;

      const clients_type&
      clients () const;

      clients_type&
      clients ();

      void
      clients (const clients_type& x);

      void
      clients (::std::auto_ptr< clients_type > p);

      // count
      // 
      typedef ::xml_schema::unsigned_int count_type;
      typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

      const count_type&
      count () const;

      count_type&
      count ();

      void
      count (const count_type& x);

      // Constructors.
      //
      cores_mdl (const clients_type&,
                 const count_type&);

      cores_mdl (::std::auto_ptr< clients_type >&,
                 const count_type&);

      cores_mdl (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      cores_mdl (const cores_mdl& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual cores_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~cores_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< clients_type > clients_;
      ::xsd::cxx::tree::one< count_type > count_;
    };

    class buffer_mdl: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // size
      // 
      typedef ::xml_schema::unsigned_int size_type;
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      const size_type&
      size () const;

      size_type&
      size ();

      void
      size (const size_type& x);

      // Constructors.
      //
      buffer_mdl (const name_type&,
                  const size_type&);

      buffer_mdl (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      buffer_mdl (const buffer_mdl& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual buffer_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~buffer_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< size_type > size_;
    };

    class queue_mdl: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // size
      // 
      typedef ::xml_schema::unsigned_int size_type;
      typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

      const size_type&
      size () const;

      size_type&
      size ();

      void
      size (const size_type& x);

      // Constructors.
      //
      queue_mdl (const name_type&,
                 const size_type&);

      queue_mdl (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      queue_mdl (const queue_mdl& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual queue_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~queue_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< size_type > size_;
    };

    class architecture_mdl: public ::xml_schema::type
    {
      public:
      // cores
      // 
      typedef ::Damaris::Model::cores_mdl cores_type;
      typedef ::xsd::cxx::tree::traits< cores_type, char > cores_traits;

      const cores_type&
      cores () const;

      cores_type&
      cores ();

      void
      cores (const cores_type& x);

      void
      cores (::std::auto_ptr< cores_type > p);

      // buffer
      // 
      typedef ::Damaris::Model::buffer_mdl buffer_type;
      typedef ::xsd::cxx::tree::traits< buffer_type, char > buffer_traits;

      const buffer_type&
      buffer () const;

      buffer_type&
      buffer ();

      void
      buffer (const buffer_type& x);

      void
      buffer (::std::auto_ptr< buffer_type > p);

      // queue
      // 
      typedef ::Damaris::Model::queue_mdl queue_type;
      typedef ::xsd::cxx::tree::traits< queue_type, char > queue_traits;

      const queue_type&
      queue () const;

      queue_type&
      queue ();

      void
      queue (const queue_type& x);

      void
      queue (::std::auto_ptr< queue_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::optional< name_type > name_optional;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_optional&
      name () const;

      name_optional&
      name ();

      void
      name (const name_type& x);

      void
      name (const name_optional& x);

      void
      name (::std::auto_ptr< name_type > p);

      // Constructors.
      //
      architecture_mdl (const cores_type&,
                        const buffer_type&,
                        const queue_type&);

      architecture_mdl (::std::auto_ptr< cores_type >&,
                        ::std::auto_ptr< buffer_type >&,
                        ::std::auto_ptr< queue_type >&);

      architecture_mdl (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      architecture_mdl (const architecture_mdl& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual architecture_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~architecture_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< cores_type > cores_;
      ::xsd::cxx::tree::one< buffer_type > buffer_;
      ::xsd::cxx::tree::one< queue_type > queue_;
      name_optional name_;
    };

    class layout_mdl: public ::xml_schema::type
    {
      public:
      // description
      // 
      typedef ::xml_schema::string description_type;
      typedef ::xsd::cxx::tree::optional< description_type > description_optional;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_optional&
      description () const;

      description_optional&
      description ();

      void
      description (const description_type& x);

      void
      description (const description_optional& x);

      void
      description (::std::auto_ptr< description_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      // 
      typedef ::xml_schema::string type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // dimensions
      // 
      typedef ::xml_schema::string dimensions_type;
      typedef ::xsd::cxx::tree::traits< dimensions_type, char > dimensions_traits;

      const dimensions_type&
      dimensions () const;

      dimensions_type&
      dimensions ();

      void
      dimensions (const dimensions_type& x);

      void
      dimensions (::std::auto_ptr< dimensions_type > p);

      // language
      // 
      typedef ::xml_schema::string language_type;
      typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

      const language_type&
      language () const;

      language_type&
      language ();

      void
      language (const language_type& x);

      void
      language (::std::auto_ptr< language_type > p);

      static const language_type&
      language_default_value ();

      // Constructors.
      //
      layout_mdl (const name_type&,
                  const type_type&,
                  const dimensions_type&);

      layout_mdl (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      layout_mdl (const layout_mdl& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual layout_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~layout_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      description_optional description_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< dimensions_type > dimensions_;
      ::xsd::cxx::tree::one< language_type > language_;
      static const language_type language_default_value_;
    };

    class variable_mdl: public ::xml_schema::type
    {
      public:
      // description
      // 
      typedef ::xml_schema::string description_type;
      typedef ::xsd::cxx::tree::optional< description_type > description_optional;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_optional&
      description () const;

      description_optional&
      description ();

      void
      description (const description_type& x);

      void
      description (const description_optional& x);

      void
      description (::std::auto_ptr< description_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // layout
      // 
      typedef ::xml_schema::string layout_type;
      typedef ::xsd::cxx::tree::traits< layout_type, char > layout_traits;

      const layout_type&
      layout () const;

      layout_type&
      layout ();

      void
      layout (const layout_type& x);

      void
      layout (::std::auto_ptr< layout_type > p);

      // enabled
      // 
      typedef ::xml_schema::boolean enabled_type;
      typedef ::xsd::cxx::tree::optional< enabled_type > enabled_optional;
      typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

      const enabled_optional&
      enabled () const;

      enabled_optional&
      enabled ();

      void
      enabled (const enabled_type& x);

      void
      enabled (const enabled_optional& x);

      // Constructors.
      //
      variable_mdl (const name_type&,
                    const layout_type&);

      variable_mdl (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      variable_mdl (const variable_mdl& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual variable_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~variable_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      description_optional description_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< layout_type > layout_;
      enabled_optional enabled_;
    };

    class group_mdl: public ::xml_schema::type
    {
      public:
      // variable
      // 
      typedef ::Damaris::Model::variable_mdl variable_type;
      typedef ::xsd::cxx::tree::sequence< variable_type > variable_sequence;
      typedef variable_sequence::iterator variable_iterator;
      typedef variable_sequence::const_iterator variable_const_iterator;
      typedef ::xsd::cxx::tree::traits< variable_type, char > variable_traits;

      const variable_sequence&
      variable () const;

      variable_sequence&
      variable ();

      void
      variable (const variable_sequence& s);

      // group
      // 
      typedef ::Damaris::Model::group_mdl group_type;
      typedef ::xsd::cxx::tree::sequence< group_type > group_sequence;
      typedef group_sequence::iterator group_iterator;
      typedef group_sequence::const_iterator group_const_iterator;
      typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

      const group_sequence&
      group () const;

      group_sequence&
      group ();

      void
      group (const group_sequence& s);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // enabled
      // 
      typedef ::xml_schema::boolean enabled_type;
      typedef ::xsd::cxx::tree::traits< enabled_type, char > enabled_traits;

      const enabled_type&
      enabled () const;

      enabled_type&
      enabled ();

      void
      enabled (const enabled_type& x);

      static enabled_type
      enabled_default_value ();

      // Constructors.
      //
      group_mdl (const name_type&);

      group_mdl (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      group_mdl (const group_mdl& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual group_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~group_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      variable_sequence variable_;
      group_sequence group_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< enabled_type > enabled_;
    };

    class parameter_mdl: public ::xml_schema::type
    {
      public:
      // description
      // 
      typedef ::xml_schema::string description_type;
      typedef ::xsd::cxx::tree::optional< description_type > description_optional;
      typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

      const description_optional&
      description () const;

      description_optional&
      description ();

      void
      description (const description_type& x);

      void
      description (const description_optional& x);

      void
      description (::std::auto_ptr< description_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // type
      // 
      typedef ::xml_schema::string type_type;
      typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

      const type_type&
      type () const;

      type_type&
      type ();

      void
      type (const type_type& x);

      void
      type (::std::auto_ptr< type_type > p);

      // value
      // 
      typedef ::xml_schema::string value_type;
      typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

      const value_type&
      value () const;

      value_type&
      value ();

      void
      value (const value_type& x);

      void
      value (::std::auto_ptr< value_type > p);

      // Constructors.
      //
      parameter_mdl (const name_type&,
                     const type_type&,
                     const value_type&);

      parameter_mdl (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      parameter_mdl (const parameter_mdl& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual parameter_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~parameter_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      description_optional description_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< type_type > type_;
      ::xsd::cxx::tree::one< value_type > value_;
    };

    class data_mdl: public ::xml_schema::type
    {
      public:
      // parameter
      // 
      typedef ::Damaris::Model::parameter_mdl parameter_type;
      typedef ::xsd::cxx::tree::sequence< parameter_type > parameter_sequence;
      typedef parameter_sequence::iterator parameter_iterator;
      typedef parameter_sequence::const_iterator parameter_const_iterator;
      typedef ::xsd::cxx::tree::traits< parameter_type, char > parameter_traits;

      const parameter_sequence&
      parameter () const;

      parameter_sequence&
      parameter ();

      void
      parameter (const parameter_sequence& s);

      // layout
      // 
      typedef ::Damaris::Model::layout_mdl layout_type;
      typedef ::xsd::cxx::tree::sequence< layout_type > layout_sequence;
      typedef layout_sequence::iterator layout_iterator;
      typedef layout_sequence::const_iterator layout_const_iterator;
      typedef ::xsd::cxx::tree::traits< layout_type, char > layout_traits;

      const layout_sequence&
      layout () const;

      layout_sequence&
      layout ();

      void
      layout (const layout_sequence& s);

      // variable
      // 
      typedef ::Damaris::Model::variable_mdl variable_type;
      typedef ::xsd::cxx::tree::sequence< variable_type > variable_sequence;
      typedef variable_sequence::iterator variable_iterator;
      typedef variable_sequence::const_iterator variable_const_iterator;
      typedef ::xsd::cxx::tree::traits< variable_type, char > variable_traits;

      const variable_sequence&
      variable () const;

      variable_sequence&
      variable ();

      void
      variable (const variable_sequence& s);

      // group
      // 
      typedef ::Damaris::Model::group_mdl group_type;
      typedef ::xsd::cxx::tree::sequence< group_type > group_sequence;
      typedef group_sequence::iterator group_iterator;
      typedef group_sequence::const_iterator group_const_iterator;
      typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

      const group_sequence&
      group () const;

      group_sequence&
      group ();

      void
      group (const group_sequence& s);

      // Constructors.
      //
      data_mdl ();

      data_mdl (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      data_mdl (const data_mdl& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual data_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~data_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      parameter_sequence parameter_;
      layout_sequence layout_;
      variable_sequence variable_;
      group_sequence group_;
    };

    class event_mdl: public ::xml_schema::type
    {
      public:
      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // action
      // 
      typedef ::xml_schema::string action_type;
      typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

      const action_type&
      action () const;

      action_type&
      action ();

      void
      action (const action_type& x);

      void
      action (::std::auto_ptr< action_type > p);

      // library
      // 
      typedef ::xml_schema::string library_type;
      typedef ::xsd::cxx::tree::traits< library_type, char > library_traits;

      const library_type&
      library () const;

      library_type&
      library ();

      void
      library (const library_type& x);

      void
      library (::std::auto_ptr< library_type > p);

      // Constructors.
      //
      event_mdl (const name_type&,
                 const action_type&,
                 const library_type&);

      event_mdl (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      event_mdl (const event_mdl& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual event_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~event_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< action_type > action_;
      ::xsd::cxx::tree::one< library_type > library_;
    };

    class actions_mdl: public ::xml_schema::type
    {
      public:
      // event
      // 
      typedef ::Damaris::Model::event_mdl event_type;
      typedef ::xsd::cxx::tree::sequence< event_type > event_sequence;
      typedef event_sequence::iterator event_iterator;
      typedef event_sequence::const_iterator event_const_iterator;
      typedef ::xsd::cxx::tree::traits< event_type, char > event_traits;

      const event_sequence&
      event () const;

      event_sequence&
      event ();

      void
      event (const event_sequence& s);

      // Constructors.
      //
      actions_mdl ();

      actions_mdl (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      actions_mdl (const actions_mdl& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual actions_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~actions_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      event_sequence event_;
    };

    class simulation_mdl: public ::xml_schema::type
    {
      public:
      // architecture
      // 
      typedef ::Damaris::Model::architecture_mdl architecture_type;
      typedef ::xsd::cxx::tree::traits< architecture_type, char > architecture_traits;

      const architecture_type&
      architecture () const;

      architecture_type&
      architecture ();

      void
      architecture (const architecture_type& x);

      void
      architecture (::std::auto_ptr< architecture_type > p);

      // data
      // 
      typedef ::Damaris::Model::data_mdl data_type;
      typedef ::xsd::cxx::tree::traits< data_type, char > data_traits;

      const data_type&
      data () const;

      data_type&
      data ();

      void
      data (const data_type& x);

      void
      data (::std::auto_ptr< data_type > p);

      // actions
      // 
      typedef ::Damaris::Model::actions_mdl actions_type;
      typedef ::xsd::cxx::tree::traits< actions_type, char > actions_traits;

      const actions_type&
      actions () const;

      actions_type&
      actions ();

      void
      actions (const actions_type& x);

      void
      actions (::std::auto_ptr< actions_type > p);

      // name
      // 
      typedef ::xml_schema::string name_type;
      typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

      const name_type&
      name () const;

      name_type&
      name ();

      void
      name (const name_type& x);

      void
      name (::std::auto_ptr< name_type > p);

      // language
      // 
      typedef ::xml_schema::string language_type;
      typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

      const language_type&
      language () const;

      language_type&
      language ();

      void
      language (const language_type& x);

      void
      language (::std::auto_ptr< language_type > p);

      static const language_type&
      language_default_value ();

      // Constructors.
      //
      simulation_mdl (const architecture_type&,
                      const data_type&,
                      const actions_type&,
                      const name_type&);

      simulation_mdl (::std::auto_ptr< architecture_type >&,
                      ::std::auto_ptr< data_type >&,
                      ::std::auto_ptr< actions_type >&,
                      const name_type&);

      simulation_mdl (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      simulation_mdl (const simulation_mdl& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual simulation_mdl*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~simulation_mdl ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< architecture_type > architecture_;
      ::xsd::cxx::tree::one< data_type > data_;
      ::xsd::cxx::tree::one< actions_type > actions_;
      ::xsd::cxx::tree::one< name_type > name_;
      ::xsd::cxx::tree::one< language_type > language_;
      static const language_type language_default_value_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Damaris
{
  namespace Model
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::Damaris::Model::simulation_mdl >
    simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MODEL_HPP
